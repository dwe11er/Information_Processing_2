# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sPpYxTQcVoGTRd12z-1XsDAEaWsTCfW1
"""

import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules
import matplotlib.pyplot as plt
import time
from google.colab import files
import chardet
import io

# Параметры по умолчанию
DEFAULT_MIN_SUPPORT = 0.001
DEFAULT_MIN_CONFIDENCE = 0.8
DEFAULT_MAX_RULE_LENGTH = 7
DEFAULT_SORT_METHOD = 'support'  # 'support' или 'lexicographic'

def load_data():
    """Загрузка данных с автоматическим определением кодировки"""
    print("Пожалуйста, загрузите файл с данными (CSV или Excel)...")
    uploaded = files.upload()

    if not uploaded:
        raise ValueError("Файл не был загружен")

    filename = next(iter(uploaded))
    file_content = uploaded[filename]

    # Попытка определить кодировку
    try:
        result = chardet.detect(file_content)
        encoding = result['encoding']
        decoded_content = file_content.decode(encoding)

        transactions = []
        for line in decoded_content.splitlines():
            items = [item.strip() for item in line.strip().split(',') if item.strip()]
            if items:
                transactions.append(items)
        return transactions
    except:
        try:
            df = pd.read_excel(io.BytesIO(file_content))
            transactions = df.apply(lambda row: [str(item) for item in row if pd.notna(item)], axis=1).tolist()
            return transactions
        except Exception as e:
            raise ValueError(f"Не удалось прочитать файл. Ошибка: {str(e)}")

def find_association_rules(frequent_itemsets, transactions, min_support, min_confidence, sort_method='support'):
    """Поиск ассоциативных правил с заданными параметрами"""

    if frequent_itemsets.empty:
        return pd.DataFrame()

    # Поиск правил
    rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=min_confidence)

    if rules.empty:
        return pd.DataFrame()

    # Форматирование правил
    rules['antecedent'] = rules['antecedents'].apply(lambda x: ', '.join(list(x)))
    rules['consequent'] = rules['consequents'].apply(lambda x: ', '.join(list(x)))
    rules['rule'] = rules['antecedent'] + " → " + rules['consequent']
    rules['total_length'] = rules['antecedents'].apply(len) + rules['consequents'].apply(len)

    # Сортировка
    if sort_method == 'support':
        rules.sort_values(['support', 'confidence'], ascending=False, inplace=True)
    elif sort_method == 'lexicographic':
        rules.sort_values(['antecedent', 'consequent'], ascending=True, inplace=True)

    return rules[['rule', 'support', 'confidence']]

def run_experiments(frequent_itemsets, transactions, min_support, confidence_range):
    """Проведение экспериментов с разными значениями достоверности"""
    results = []
    performance = []

    for confidence in confidence_range:
        start_time = time.time()
        rules = find_association_rules(frequent_itemsets, transactions, min_support, confidence)
        elapsed_time = time.time() - start_time

        num_rules = len(rules)
        results.append((confidence, num_rules))
        performance.append((confidence, elapsed_time))

        print(f"Достоверность: {confidence:.2f}, Найдено правил: {num_rules}, Время: {elapsed_time:.2f}с")

    return pd.DataFrame(results, columns=['confidence', 'num_rules']), \
           pd.DataFrame(performance, columns=['confidence', 'time'])

def visualize_results(experiment_results, performance_results):
    """Визуализация результатов экспериментов"""
    plt.figure(figsize=(14, 6))

    # График количества правил
    plt.subplot(1, 2, 1)
    plt.plot(experiment_results['confidence'], experiment_results['num_rules'], 'bo-')
    plt.title('Количество правил в зависимости от достоверности')
    plt.xlabel('Достоверность (confidence)')
    plt.ylabel('Количество правил')
    plt.grid()

    # График времени выполнения
    plt.subplot(1, 2, 2)
    plt.plot(performance_results['confidence'], performance_results['time'], 'ro-')
    plt.title('Время выполнения в зависимости от достоверности')
    plt.xlabel('Достоверность (confidence)')
    plt.ylabel('Время (секунды)')
    plt.grid()

    plt.tight_layout()
    plt.show()

def main():
    try:
        # Загрузка данных
        transactions = load_data()
        print(f"\nЗагружено {len(transactions)} транзакций")
        print("Пример первых 3 транзакций:")
        for t in transactions[:3]:
            print(t)

        # Основной анализ с параметрами по умолчанию
        print("\nОсновной анализ с параметрами по умолчанию:")
        print(f"Минимальная поддержка: {DEFAULT_MIN_SUPPORT}")
        print(f"Минимальная достоверность: {DEFAULT_MIN_CONFIDENCE}")
        print(f"Максимальная длина правила: {DEFAULT_MAX_RULE_LENGTH}")
        print(f"Метод сортировки: {DEFAULT_SORT_METHOD}")

        # Преобразование в бинарный формат
        te = TransactionEncoder()
        te_ary = te.fit(transactions).transform(transactions)
        df = pd.DataFrame(te_ary, columns=te.columns_)

        # Поиск частых наборов
        frequent_itemsets = apriori(df, min_support=DEFAULT_MIN_SUPPORT, use_colnames=True)

        rules = find_association_rules(
            frequent_itemsets,
            transactions,
            min_support=DEFAULT_MIN_SUPPORT,
            min_confidence=DEFAULT_MIN_CONFIDENCE,
            sort_method=DEFAULT_SORT_METHOD
        )

        if not rules.empty:
            print("\nНайденные правила (первые 20):")
            print(rules.head(20).to_string(index=False))
            print(f"\nВсего найдено правил: {len(rules)}")
        else:
            print("\nНе найдено правил с заданными параметрами.")

        # Проведение экспериментов
        print("\nПроведение экспериментов с разными значениями достоверности...")
        confidence_range = [0.7, 0.75, 0.8, 0.85, 0.9, 0.95]

        experiment_results, performance_results = run_experiments(
            frequent_itemsets,
            transactions,
            min_support=DEFAULT_MIN_SUPPORT,
            confidence_range=confidence_range
        )

        # Визуализация результатов экспериментов
        print("\nВизуализация результатов экспериментов...")
        visualize_results(experiment_results, performance_results)

        # Вывод результатов экспериментов
        print("\nРезультаты экспериментов:")
        print("Достоверность | Количество правил | Время выполнения")
        for _, row in experiment_results.iterrows():
            conf = row['confidence']
            num = row['num_rules']
            time = performance_results[performance_results['confidence'] == conf]['time'].values[0]
            print(f"{conf:.2f}         | {num:>16} | {time:.2f} сек")

    except Exception as e:
        print(f"\nОшибка: {str(e)}")

if __name__ == "__main__":
    main()